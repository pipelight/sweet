use phf::phf_map;
use evdev::Key;
use crate::ParseError;

// Perfect Hash Function static map (loads at compile time)
static KEY_MAP: phf::Map<&'static str, Key> = phf_map! {
    "q" => Key::KEY_Q,
    "w" => Key::KEY_W,
    "e" => Key::KEY_E,
    "r" => Key::KEY_R,
    "t" => Key::KEY_T,
    "y" => Key::KEY_Y,
    "u" => Key::KEY_U,
    "i" => Key::KEY_I,
    "o" => Key::KEY_O,
    "p" => Key::KEY_P,
    "a" => Key::KEY_A,
    "s" => Key::KEY_S,
    "d" => Key::KEY_D,
    "f" => Key::KEY_F,
    "g" => Key::KEY_G,
    "h" => Key::KEY_H,
    "j" => Key::KEY_J,
    "k" => Key::KEY_K,
    "l" => Key::KEY_L,
    "z" => Key::KEY_Z,
    "x" => Key::KEY_X,
    "c" => Key::KEY_C,
    "v" => Key::KEY_V,
    "b" => Key::KEY_B,
    "n" => Key::KEY_N,
    "m" => Key::KEY_M,
    "1" => Key::KEY_1,
    "2" => Key::KEY_2,
    "3" => Key::KEY_3,
    "4" => Key::KEY_4,
    "5" => Key::KEY_5,
    "6" => Key::KEY_6,
    "7" => Key::KEY_7,
    "8" => Key::KEY_8,
    "9" => Key::KEY_9,
    "0" => Key::KEY_0,
    "escape" => Key::KEY_ESC,
    "backspace" => Key::KEY_BACKSPACE,
    "capslock" => Key::KEY_CAPSLOCK,
    "return" => Key::KEY_ENTER,
    "enter" => Key::KEY_ENTER,
    "tab" => Key::KEY_TAB,
    "space" => Key::KEY_SPACE,
    "plus" => Key::KEY_KPPLUS,
    "kp0" => Key::KEY_KP0,
    "kp1" => Key::KEY_KP1,
    "kp2" => Key::KEY_KP2,
    "kp3" => Key::KEY_KP3,
    "kp4" => Key::KEY_KP4,
    "kp5" => Key::KEY_KP5,
    "kp6" => Key::KEY_KP6,
    "kp7" => Key::KEY_KP7,
    "kp8" => Key::KEY_KP8,
    "kp9" => Key::KEY_KP9,
    "kpasterisk" => Key::KEY_KPASTERISK,
    "kpcomma" => Key::KEY_KPCOMMA,
    "kpdot" => Key::KEY_KPDOT,
    "kpenter" => Key::KEY_KPENTER,
    "kpequal" => Key::KEY_KPEQUAL,
    "kpjpcomma" => Key::KEY_KPJPCOMMA,
    "kpleftparen" => Key::KEY_KPLEFTPAREN,
    "kpminus" => Key::KEY_KPMINUS,
    "kpplusminus" => Key::KEY_KPPLUSMINUS,
    "kprightparen" => Key::KEY_KPRIGHTPAREN,
    "minus" => Key::KEY_MINUS,
    "-" => Key::KEY_MINUS,
    "equal" => Key::KEY_EQUAL,
    "=" => Key::KEY_EQUAL,
    "grave" => Key::KEY_GRAVE,
    "`" => Key::KEY_GRAVE,
    "print" => Key::KEY_SYSRQ,
    "volumeup" => Key::KEY_VOLUMEUP,
    "xf86audioraisevolume" => Key::KEY_VOLUMEUP,
    "volumedown" => Key::KEY_VOLUMEDOWN,
    "xf86audiolowervolume" => Key::KEY_VOLUMEDOWN,
    "mute" => Key::KEY_MUTE,
    "xf86audiomute" => Key::KEY_MUTE,
    "brightnessup" => Key::KEY_BRIGHTNESSUP,
    "xf86monbrightnessup" => Key::KEY_BRIGHTNESSUP,
    "brightnessdown" => Key::KEY_BRIGHTNESSDOWN,
    "xf86audiomedia" => Key::KEY_MEDIA,
    "xf86audiomicmute" => Key::KEY_MICMUTE,
    "micmute" => Key::KEY_MICMUTE,
    "xf86audionext" => Key::KEY_NEXTSONG,
    "xf86audioplay" => Key::KEY_PLAYPAUSE,
    "xf86audioprev" => Key::KEY_PREVIOUSSONG,
    "xf86audiostop" => Key::KEY_STOP,
    "xf86monbrightnessdown" => Key::KEY_BRIGHTNESSDOWN,
    "," => Key::KEY_COMMA,
    "comma" => Key::KEY_COMMA,
    "." => Key::KEY_DOT,
    "dot" => Key::KEY_DOT,
    "period" => Key::KEY_DOT,
    "/" => Key::KEY_SLASH,
    "question" => Key::KEY_QUESTION,
    "slash" => Key::KEY_SLASH,
    "backslash" => Key::KEY_BACKSLASH,
    "\\" => Key::KEY_BACKSLASH,
    "leftbrace" => Key::KEY_LEFTBRACE,
    "[" => Key::KEY_LEFTBRACE,
    "bracketleft" => Key::KEY_LEFTBRACE,
    "rightbrace" => Key::KEY_RIGHTBRACE,
    "]" => Key::KEY_RIGHTBRACE,
    "bracketright" => Key::KEY_RIGHTBRACE,
    ";" => Key::KEY_SEMICOLON,
    "scroll_lock" => Key::KEY_SCROLLLOCK,
    "semicolon" => Key::KEY_SEMICOLON,
    "'" => Key::KEY_APOSTROPHE,
    "apostrophe" => Key::KEY_APOSTROPHE,
    "left" => Key::KEY_LEFT,
    "right" => Key::KEY_RIGHT,
    "up" => Key::KEY_UP,
    "down" => Key::KEY_DOWN,
    "pause" => Key::KEY_PAUSE,
    "home" => Key::KEY_HOME,
    "delete" => Key::KEY_DELETE,
    "insert" => Key::KEY_INSERT,
    "end" => Key::KEY_END,
    "prior" => Key::KEY_PAGEDOWN,
    "next" => Key::KEY_PAGEUP,
    "pagedown" => Key::KEY_PAGEDOWN,
    "pageup" => Key::KEY_PAGEUP,
    "f1" => Key::KEY_F1,
    "f2" => Key::KEY_F2,
    "f3" => Key::KEY_F3,
    "f4" => Key::KEY_F4,
    "f5" => Key::KEY_F5,
    "f6" => Key::KEY_F6,
    "f7" => Key::KEY_F7,
    "f8" => Key::KEY_F8,
    "f9" => Key::KEY_F9,
    "f10" => Key::KEY_F10,
    "f11" => Key::KEY_F11,
    "f12" => Key::KEY_F12,
    "f13" => Key::KEY_F13,
    "f14" => Key::KEY_F14,
    "f15" => Key::KEY_F15,
    "f16" => Key::KEY_F16,
    "f17" => Key::KEY_F17,
    "f18" => Key::KEY_F18,
    "f19" => Key::KEY_F19,
    "f20" => Key::KEY_F20,
    "f21" => Key::KEY_F21,
    "f22" => Key::KEY_F22,
    "f23" => Key::KEY_F23,
    "f24" => Key::KEY_F24,
    "super_l" => Key::KEY_COPY
};

pub fn convert(s: &str) -> Result<Key, ParseError> {
    KEY_MAP
        .get(s)
        .copied()
        .ok_or_else(|| ParseError::InvalidKey(s.to_string()))
}
